.\" -*- mode: troff; coding: utf-8 -*-
.TH "LIGHTNING-DECODE" "7" "" "Core Lightning 22.11rc1" ""
.SH NAME
lightning-decode -- Command for decoding an invoice string (low-level)
.SH SYNOPSIS
\fBdecode\fR \fIstring\fR
.SH DESCRIPTION
The \fBdecode\fR RPC command checks and parses:
.IP "\(bu" 2
a \fIbolt11\fR or \fIbolt12\fR string (optionally prefixed by \fClightning:\fR
or \fCLIGHTNING:\fR) as specified by the BOLT 11 and BOLT 12
specifications.
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
a \fIrune\fR as created by lightning-commando-rune(7).
.LP
It may decode other formats in future.
.SH RETURN VALUE
On success, an object is returned, containing:
.IP "\(bu" 2
\fBtype\fR (string): what kind of object it decoded to (one of \(dqbolt12 offer\(dq, \(dqbolt12 invoice\(dq, \(dqbolt12 invoice_request\(dq, \(dqbolt11 invoice\(dq, \(dqrune\(dq)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBvalid\fR (boolean): if this is false, you \fIMUST\fR not use the result except for diagnostics!
.LP
If \fBtype\fR is \(dqbolt12 offer\(dq, and \fBvalid\fR is \fItrue\fR:
.IP "\(bu" 2
\fBoffer_id\fR (hex): the id we use to identify this offer (always 64 characters)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_description\fR (string): the description of the purpose of the offer
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_node_id\fR (pubkey): public key of the offering node
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_chains\fR (array of hexs, optional): which blockchains this offer is for (missing implies bitcoin mainnet only):
.RS
.IP "\(bu" 2
the genesis blockhash (always 64 characters)
.RE
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_metadata\fR (hex, optional): any metadata the creater of the offer includes
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_currency\fR (string, optional): ISO 4217 code of the currency (missing implies Bitcoin) (always 3 characters)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBcurrency_minor_unit\fR (u32, optional): the number of decimal places to apply to amount (if currency known)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_amount\fR (u64, optional): the amount in the \fCoffer_currency\fR adjusted by \fCcurrency_minor_unit\fR, if any
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_amount_msat\fR (msat, optional): the amount in bitcoin (if specified, and no \fCoffer_currency\fR)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_issuer\fR (string, optional): the description of the creator of the offer
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_features\fR (hex, optional): the feature bits of the offer
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_absolute_expiry\fR (u64, optional): UNIX timestamp of when this offer expires
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_quantity_max\fR (u64, optional): the maximum quantity (or, if 0, means any quantity)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_paths\fR (array of objects, optional): Paths to the destination:
.RS
.IP "\(bu" 2
\fBfirst_node_id\fR (pubkey): the (presumably well-known) public key of the start of the path
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBblinding\fR (pubkey): blinding factor for this path
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBpath\fR (array of objects): an individual path:
.RS
.IP "\(bu" 2
\fBblinded_node_id\fR (pubkey): node_id of the hop
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBencrypted_recipient_data\fR (hex): encrypted TLV entry for this hop
.RE
.RE
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_recurrence\fR (object, optional): how often to this offer should be used:
.RS
.IP "\(bu" 2
\fBtime_unit\fR (u32): the BOLT12 time unit
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBperiod\fR (u32): how many \fCtime_unit\fR per payment period
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBtime_unit_name\fR (string, optional): the name of \fCtime_unit\fR (if valid)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBbasetime\fR (u64, optional): period starts at this UNIX timestamp
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBstart_any_period\fR (u64, optional): you can start at any period (only if \fCbasetime\fR present)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBlimit\fR (u32, optional): maximum period number for recurrence
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBpaywindow\fR (object, optional): when within a period will payment be accepted (default is prior and during the period):
.RS
.IP "\(bu" 2
\fBseconds_before\fR (u32): seconds prior to period start
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBseconds_after\fR (u32): seconds after to period start
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBproportional_amount\fR (boolean, optional): amount should be scaled if payed after period start (always \fItrue\fR)
.RE
.RE
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBunknown_offer_tlvs\fR (array of objects, optional): Any extra fields we didn't know how to parse:
.RS
.IP "\(bu" 2
\fBtype\fR (u64): The type
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBlength\fR (u64): The length
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBvalue\fR (hex): The value
.RE
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
the following warnings are possible:
.RS
.IP "\(bu" 2
\fBwarning_unknown_offer_currency\fR: The currency code is unknown (so no \fCcurrency_minor_unit\fR)
.RE
.LP
If \fBtype\fR is \(dqbolt12 offer\(dq, and \fBvalid\fR is \fIfalse\fR:
.IP "\(bu" 2
the following warnings are possible:
.RS
.IP "\(bu" 2
\fBwarning_missing_offer_node_id\fR: \fCoffer_node_id\fR is not present
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_invalid_offer_description\fR: \fCoffer_description\fR is not valid UTF8
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_missing_offer_description\fR: \fCoffer_description\fR is not present
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_invalid_offer_currency\fR: \fCoffer_currency_code\fR is not valid UTF8
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_invalid_offer_issuer\fR: \fCoffer_issuer\fR is not valid UTF8
.RE
.LP
If \fBtype\fR is \(dqbolt12 invoice_request\(dq, and \fBvalid\fR is \fItrue\fR:
.IP "\(bu" 2
\fBoffer_description\fR (string): the description of the purpose of the offer
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_node_id\fR (pubkey): public key of the offering node
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvreq_metadata\fR (hex): the payer-provided blob to derive invreq\fIpayer\fRid
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvreq_payer_id\fR (hex): the payer-provided key
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBsignature\fR (bip340sig): BIP-340 signature of the \fCinvreq_payer_id\fR on this invoice_request
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_id\fR (hex, optional): the id we use to identify this offer (always 64 characters)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_chains\fR (array of hexs, optional): which blockchains this offer is for (missing implies bitcoin mainnet only):
.RS
.IP "\(bu" 2
the genesis blockhash (always 64 characters)
.RE
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_metadata\fR (hex, optional): any metadata the creator of the offer includes
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_currency\fR (string, optional): ISO 4217 code of the currency (missing implies Bitcoin) (always 3 characters)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBcurrency_minor_unit\fR (u32, optional): the number of decimal places to apply to amount (if currency known)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_amount\fR (u64, optional): the amount in the \fCoffer_currency\fR adjusted by \fCcurrency_minor_unit\fR, if any
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_amount_msat\fR (msat, optional): the amount in bitcoin (if specified, and no \fCoffer_currency\fR)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_issuer\fR (string, optional): the description of the creator of the offer
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_features\fR (hex, optional): the feature bits of the offer
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_absolute_expiry\fR (u64, optional): UNIX timestamp of when this offer expires
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_quantity_max\fR (u64, optional): the maximum quantity (or, if 0, means any quantity)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_paths\fR (array of objects, optional): Paths to the destination:
.RS
.IP "\(bu" 2
\fBfirst_node_id\fR (pubkey): the (presumably well-known) public key of the start of the path
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBblinding\fR (pubkey): blinding factor for this path
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBpath\fR (array of objects): an individual path:
.RS
.IP "\(bu" 2
\fBblinded_node_id\fR (pubkey): node_id of the hop
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBencrypted_recipient_data\fR (hex): encrypted TLV entry for this hop
.RE
.RE
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_recurrence\fR (object, optional): how often to this offer should be used:
.RS
.IP "\(bu" 2
\fBtime_unit\fR (u32): the BOLT12 time unit
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBperiod\fR (u32): how many \fCtime_unit\fR per payment period
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBtime_unit_name\fR (string, optional): the name of \fCtime_unit\fR (if valid)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBbasetime\fR (u64, optional): period starts at this UNIX timestamp
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBstart_any_period\fR (u64, optional): you can start at any period (only if \fCbasetime\fR present)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBlimit\fR (u32, optional): maximum period number for recurrence
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBpaywindow\fR (object, optional): when within a period will payment be accepted (default is prior and during the period):
.RS
.IP "\(bu" 2
\fBseconds_before\fR (u32): seconds prior to period start
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBseconds_after\fR (u32): seconds after to period start
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBproportional_amount\fR (boolean, optional): amount should be scaled if payed after period start (always \fItrue\fR)
.RE
.RE
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvreq_chain\fR (hex, optional): which blockchain this offer is for (missing implies bitcoin mainnet only) (always 64 characters)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvreq_amount_msat\fR (msat, optional): the amount the invoice should be for
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvreq_features\fR (hex, optional): the feature bits of the invoice_request
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvreq_quantity\fR (u64, optional): the number of items to invoice for
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvreq_payer_note\fR (string, optional): a note attached by the payer
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvreq_recurrence_counter\fR (u32, optional): which number request this is for the same invoice
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvreq_recurrence_start\fR (u32, optional): when we're requesting to start an invoice at a non-zero period
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBunknown_invoice_request_tlvs\fR (array of objects, optional): Any extra fields we didn't know how to parse:
.RS
.IP "\(bu" 2
\fBtype\fR (u64): The type
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBlength\fR (u64): The length
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBvalue\fR (hex): The value
.RE
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
the following warnings are possible:
.RS
.IP "\(bu" 2
\fBwarning_unknown_offer_currency\fR: The currency code is unknown (so no \fCcurrency_minor_unit\fR)
.RE
.LP
If \fBtype\fR is \(dqbolt12 invoice_request\(dq, and \fBvalid\fR is \fIfalse\fR:
.IP "\(bu" 2
the following warnings are possible:
.RS
.IP "\(bu" 2
\fBwarning_invalid_offer_description\fR: \fCoffer_description\fR is not valid UTF8
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_missing_offer_description\fR: \fCoffer_description\fR is not present
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_invalid_offer_currency\fR: \fCoffer_currency_code\fR is not valid UTF8
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_invalid_offer_issuer\fR: \fCoffer_issuer\fR is not valid UTF8
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_missing_invreq_metadata\fR: \fCinvreq_metadata\fR is not present
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_missing_invreq_payer_id\fR: \fCinvreq_payer_id\fR is not present
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_invalid_invreq_payer_note\fR: \fCinvreq_payer_note\fR is not valid UTF8
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_missing_invoice_request_signature\fR: \fCsignature\fR is not present
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_invalid_invoice_request_signature\fR: Incorrect \fCsignature\fR
.RE
.LP
If \fBtype\fR is \(dqbolt12 invoice\(dq, and \fBvalid\fR is \fItrue\fR:
.IP "\(bu" 2
\fBoffer_description\fR (string): the description of the purpose of the offer
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_node_id\fR (pubkey): public key of the offering node
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvreq_metadata\fR (hex): the payer-provided blob to derive invreq\fIpayer\fRid
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvreq_payer_id\fR (hex): the payer-provided key
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvoice_paths\fR (array of objects): Paths to pay the destination:
.RS
.IP "\(bu" 2
\fBfirst_node_id\fR (pubkey): the (presumably well-known) public key of the start of the path
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBblinding\fR (pubkey): blinding factor for this path
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBpath\fR (array of objects): an individual path:
.RS
.IP "\(bu" 2
\fBblinded_node_id\fR (pubkey): node_id of the hop
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBencrypted_recipient_data\fR (hex): encrypted TLV entry for this hop
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBfee_base_msat\fR (msat, optional): basefee for path
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBfee_proportional_millionths\fR (u32, optional): proportional fee for path
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBcltv_expiry_delta\fR (u32, optional): CLTV delta for path
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBfeatures\fR (hex, optional): features allowed for path
.RE
.RE
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvoice_created_at\fR (u64): the UNIX timestamp of invoice creation
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvoice_payment_hash\fR (hex): the hash of the \fIpayment_preimage\fR (always 64 characters)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvoice_amount_msat\fR (msat): the amount required to fulfill invoice
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBsignature\fR (bip340sig): BIP-340 signature of the \fCoffer_node_id\fR on this invoice
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_id\fR (hex, optional): the id we use to identify this offer (always 64 characters)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_chains\fR (array of hexs, optional): which blockchains this offer is for (missing implies bitcoin mainnet only):
.RS
.IP "\(bu" 2
the genesis blockhash (always 64 characters)
.RE
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_metadata\fR (hex, optional): any metadata the creator of the offer includes
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_currency\fR (string, optional): ISO 4217 code of the currency (missing implies Bitcoin) (always 3 characters)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBcurrency_minor_unit\fR (u32, optional): the number of decimal places to apply to amount (if currency known)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_amount\fR (u64, optional): the amount in the \fCoffer_currency\fR adjusted by \fCcurrency_minor_unit\fR, if any
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_amount_msat\fR (msat, optional): the amount in bitcoin (if specified, and no \fCoffer_currency\fR)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_issuer\fR (string, optional): the description of the creator of the offer
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_features\fR (hex, optional): the feature bits of the offer
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_absolute_expiry\fR (u64, optional): UNIX timestamp of when this offer expires
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_quantity_max\fR (u64, optional): the maximum quantity (or, if 0, means any quantity)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_paths\fR (array of objects, optional): Paths to the destination:
.RS
.IP "\(bu" 2
\fBfirst_node_id\fR (pubkey): the (presumably well-known) public key of the start of the path
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBblinding\fR (pubkey): blinding factor for this path
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBpath\fR (array of objects): an individual path:
.RS
.IP "\(bu" 2
\fBblinded_node_id\fR (pubkey): node_id of the hop
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBencrypted_recipient_data\fR (hex): encrypted TLV entry for this hop
.RE
.RE
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBoffer_recurrence\fR (object, optional): how often to this offer should be used:
.RS
.IP "\(bu" 2
\fBtime_unit\fR (u32): the BOLT12 time unit
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBperiod\fR (u32): how many \fCtime_unit\fR per payment period
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBtime_unit_name\fR (string, optional): the name of \fCtime_unit\fR (if valid)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBbasetime\fR (u64, optional): period starts at this UNIX timestamp
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBstart_any_period\fR (u64, optional): you can start at any period (only if \fCbasetime\fR present)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBlimit\fR (u32, optional): maximum period number for recurrence
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBpaywindow\fR (object, optional): when within a period will payment be accepted (default is prior and during the period):
.RS
.IP "\(bu" 2
\fBseconds_before\fR (u32): seconds prior to period start
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBseconds_after\fR (u32): seconds after to period start
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBproportional_amount\fR (boolean, optional): amount should be scaled if payed after period start (always \fItrue\fR)
.RE
.RE
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvreq_chain\fR (hex, optional): which blockchain this offer is for (missing implies bitcoin mainnet only) (always 64 characters)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvreq_amount_msat\fR (msat, optional): the amount the invoice should be for
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvreq_features\fR (hex, optional): the feature bits of the invoice_request
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvreq_quantity\fR (u64, optional): the number of items to invoice for
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvreq_payer_note\fR (string, optional): a note attached by the payer
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvreq_recurrence_counter\fR (u32, optional): which number request this is for the same invoice
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvreq_recurrence_start\fR (u32, optional): when we're requesting to start an invoice at a non-zero period
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvoice_relative_expiry\fR (u32, optional): the number of seconds after \fIinvoice\fIcreated\fIat\fR when this expires
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvoice_fallbacks\fR (array of objects, optional): onchain addresses:
.RS
.IP "\(bu" 2
\fBversion\fR (u8): Segwit address version
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBhex\fR (hex): Raw encoded segwit address
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBaddress\fR (string, optional): bech32 segwit address
.RE
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvoice_features\fR (hex, optional): the feature bits of the invoice
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvoice_node_id\fR (pubkey, optional): the id to pay (usually the same as offer\fInode\fRid)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBinvoice_recurrence_basetime\fR (u64, optional): the UNIX timestamp to base the invoice periods on
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBunknown_invoice_tlvs\fR (array of objects, optional): Any extra fields we didn't know how to parse:
.RS
.IP "\(bu" 2
\fBtype\fR (u64): The type
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBlength\fR (u64): The length
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBvalue\fR (hex): The value
.RE
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
the following warnings are possible:
.RS
.IP "\(bu" 2
\fBwarning_unknown_offer_currency\fR: The currency code is unknown (so no \fCcurrency_minor_unit\fR)
.RE
.LP
If \fBtype\fR is \(dqbolt12 invoice\(dq, and \fBvalid\fR is \fIfalse\fR:
.IP "\(bu" 2
\fBfallbacks\fR (array of objects, optional):
.RS
.IP "\(bu" 2
the following warnings are possible:
.RS
.IP "\(bu" 2
\fBwarning_invoice_fallbacks_version_invalid\fR: \fCversion\fR is > 16
.RE
.RE
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
the following warnings are possible:
.RS
.IP "\(bu" 2
\fBwarning_invalid_offer_description\fR: \fCoffer_description\fR is not valid UTF8
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_missing_offer_description\fR: \fCoffer_description\fR is not present
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_invalid_offer_currency\fR: \fCoffer_currency_code\fR is not valid UTF8
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_invalid_offer_issuer\fR: \fCoffer_issuer\fR is not valid UTF8
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_missing_invreq_metadata\fR: \fCinvreq_metadata\fR is not present
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_invalid_invreq_payer_note\fR: \fCinvreq_payer_note\fR is not valid UTF8
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_missing_invoice_paths\fR: \fCinvoice_paths\fR is not present
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_missing_invoice_blindedpay\fR: \fCinvoice_blindedpay\fR is not present
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_missing_invoice_created_at\fR: \fCinvoice_created_at\fR is not present
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_missing_invoice_payment_hash\fR: \fCinvoice_payment_hash\fR is not present
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_missing_invoice_amount\fR: \fCinvoice_amount\fR is not present
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_missing_invoice_recurrence_basetime\fR: \fCinvoice_recurrence_basetime\fR is not present
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_missing_invoice_node_id\fR: \fCinvoice_node_id\fR is not present
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_missing_invoice_signature\fR: \fCsignature\fR is not present
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBwarning_invalid_invoice_signature\fR: Incorrect \fCsignature\fR
.RE
.LP
If \fBtype\fR is \(dqbolt11 invoice\(dq, and \fBvalid\fR is \fItrue\fR:
.IP "\(bu" 2
\fBcurrency\fR (string): the BIP173 name for the currency
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBcreated_at\fR (u64): the UNIX-style timestamp of the invoice
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBexpiry\fR (u64): the number of seconds this is valid after \fCcreated_at\fR
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBpayee\fR (pubkey): the public key of the recipient
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBpayment_hash\fR (hex): the hash of the \fIpayment_preimage\fR (always 64 characters)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBsignature\fR (signature): signature of the \fIpayee\fR on this invoice
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBmin_final_cltv_expiry\fR (u32): the minimum CLTV delay for the final node
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBamount_msat\fR (msat, optional): Amount the invoice asked for
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBdescription\fR (string, optional): the description of the purpose of the purchase
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBdescription_hash\fR (hex, optional): the hash of the description, in place of \fIdescription\fR (always 64 characters)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBpayment_secret\fR (hex, optional): the secret to hand to the payee node (always 64 characters)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBfeatures\fR (hex, optional): the features bitmap for this invoice
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBpayment_metadata\fR (hex, optional): the payment_metadata to put in the payment
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBfallbacks\fR (array of objects, optional): onchain addresses:
.RS
.IP "\(bu" 2
\fBtype\fR (string): the address type (if known) (one of \(dqP2PKH\(dq, \(dqP2SH\(dq, \(dqP2WPKH\(dq, \(dqP2WSH\(dq)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBhex\fR (hex): Raw encoded address
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBaddr\fR (string, optional): the address in appropriate format for \fItype\fR
.RE
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBroutes\fR (array of arrays, optional): Route hints to the \fIpayee\fR:
.RS
.IP "\(bu" 2
hops in the route:
.RS
.IP "\(bu" 2
\fBpubkey\fR (pubkey): the public key of the node
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBshort_channel_id\fR (short_channel_id): a channel to the next peer
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBfee_base_msat\fR (msat): the base fee for payments
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBfee_proportional_millionths\fR (u32): the parts-per-million fee for payments
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBcltv_expiry_delta\fR (u32): the CLTV delta across this hop
.RE
.RE
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBextra\fR (array of objects, optional): Any extra fields we didn't know how to parse:
.RS
.IP "\(bu" 2
\fBtag\fR (string): The bech32 letter which identifies this field (always 1 characters)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBdata\fR (string): The bech32 data for this field
.RE
.LP
If \fBtype\fR is \(dqrune\(dq, and \fBvalid\fR is \fItrue\fR:
.IP "\(bu" 2
\fBvalid\fR (boolean) (always \fItrue\fR)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBstring\fR (string): the string encoding of the rune
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBrestrictions\fR (array of objects): restrictions built into the rune: all must pass:
.RS
.IP "\(bu" 2
\fBalternatives\fR (array of strings): each way restriction can be met: any can pass:
.RS
.IP "\(bu" 2
the alternative of form fieldname condition fieldname
.RE
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBsummary\fR (string): human-readable summary of this restriction
.RE
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBunique_id\fR (string, optional): unique id (always a numeric id on runes we create)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBversion\fR (string, optional): rune version, not currently set on runes we create
.LP
If \fBtype\fR is \(dqrune\(dq, and \fBvalid\fR is \fIfalse\fR:
.IP "\(bu" 2
\fBvalid\fR (boolean) (always \fIfalse\fR)
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
\fBhex\fR (hex, optional): the raw rune in hex
.if n \
.sp -1
.if t \
.sp -0.25v
.IP "\(bu" 2
the following warnings are possible:
.RS
.IP "\(bu" 2
\fBwarning_rune_invalid_utf8\fR: the rune contains invalid UTF-8 strings
.RE
.SH AUTHOR
Rusty Russell <\fIrusty@rustcorp.com.au\fR> is mainly responsible.
.SH SEE ALSO
lightning-pay(7), lightning-offer(7), lightning-offerout(7), lightning-fetchinvoice(7), lightning-sendinvoice(7), lightning-commando-rune(7)
.PP
\fBBOLT #11\fR (\fIhttps://github.com/lightningnetwork/bolts/blob/master/11-payment-encoding.md\fR).
.PP
\fBBOLT #12\fR (\fIhttps://github.com/rustyrussell/lightning-rfc/blob/guilt/offers/12-offer-encoding.md\fR).
.SH RESOURCES
Main web site: \fIhttps://github.com/ElementsProject/lightning\fR
\" SHA256STAMP:d7ec63dfedfa9acac305fb3931dc443ac807504ad41d3bd7932a5db4ce2901ea
